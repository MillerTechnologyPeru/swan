#!/usr/bin/env python

"""
//===---------------------------------------------------------------------===//
//
// This source file is part of the SWAN open source project
//
// Copyright (c) 2019 Maple @ University of Alberta
// All rights reserved. This program and the accompanying materials (unless
// otherwise specified by a license inside of the accompanying material)
// are made available under the terms of the Eclipse Public License v2.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v20.html
//
//===---------------------------------------------------------------------===//
"""

import argparse
import os
import sys
import subprocess
from subprocess import Popen, PIPE, STDOUT

def run_xcodebuild(cmd):
    p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)
    stdout, stderr = p.communicate()
    p_status = p.wait()
    if (p_status != 0):
        sys.stderr.write(stderr)
        exit(1)
    with open("/tmp/SWAN_arguments.txt", 'r') as file:
        args = file.read().replace('\n', '').replace('\r', '')
        run_swiftc(args)

def run_swiftc(args):
    cmd = "swiftc " + args + " -driver-print-jobs"
    p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)
    stdout, stderr = p.communicate()
    p_status = p.wait()
    if (p_status != 0):
        sys.stderr.write(stderr)
        exit(1)
    jobs = stdout.replace('\n', ' ').replace('\r', '')
    jobs = jobs.split(" ") # change this for path spaces
    jobs = jobs[3:] # cut off '...swift -frontend -c'
    try:
        idx = jobs.index("-supplementary-output-file-map")
        jobs = jobs[0:idx] + jobs[idx+2:]
    except:
        pass # argument doesn't exist, which is fine
    jobs.append("-emit-silgen")
    jobs = " ".join(jobs)

    # print results (IMPORTANT)
    sys.stdout.write(jobs)

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-project-path", required=True)
    parser.add_argument("-scheme", required=True)
    parser.add_argument("-xcode-options", required=True)
    args = parser.parse_args()

    cmd = "xcodebuild build -project " + args.project_path + \
        " -scheme " + args.scheme + " " + args.xcode_options + \
        " SWIFT_COMPILATION_MODE=wholemodule SWIFT_OPTIMIZATION_LEVEL=-Onone SWIFT_EXEC=" + \
        os.getcwd() + "/utils/argument-writer"

    run_xcodebuild(cmd);


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)
