#!/usr/bin/env python

"""
//===---------------------------------------------------------------------===//
//
// This source file is part of the SWAN open source project
//
// Copyright (c) 2019 Maple @ University of Alberta
// All rights reserved. This program and the accompanying materials (unless
// otherwise specified by a license inside of the accompanying material)
// are made available under the terms of the Eclipse Public License v2.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v20.html
//
//===---------------------------------------------------------------------===//
"""

import argparse
import os
import os.path
from os import path
import subprocess
import sys
from constants import *

def clone_swift():
    if path.exists(PACKAGES_DIR + "/swift"):
        return
    os.chdir(PACKAGES_DIR)
    os.system("git clone --branch " + SUPPORTED_SWIFT_TAG + " " + SWIFT_REPO_URL)
    # First clone without tag since tag may not exist.
    os.system("/." + SWIFT_UTILS_DIR + "update-checkout --clone")
    os.system("/." + SWIFT_UTILS_DIR + "update-checkout --tag " + SUPPORTED_SWIFT_TAG)
    os.chdir(ROOT)

def clone_wala():
    if path.exists(PACKAGES_DIR + "/WALA"):
        return
    os.chdir(PACKAGES_DIR)
    os.system("git clone --branch " + SUPPORTED_WALA_TAG + " " + WALA_REPO_URL)
    os.chdir(ROOT)

def clone_swan_vscode():
    if path.exists(PACKAGES_DIR + "/swan-vscode"):
        os.chdir(PACKAGES_DIR)
        print("Updating VSCode Extension...")
        try:
            os.system("git fetch")
            os.system("git pull")
        except:
            pass
        os.chdir(ROOT)
        return
    os.chdir(PACKAGES_DIR)
    os.system("git clone " + SWAN_VSCODE_REPO_URL + " --branch dev")
    os.chdir(ROOT)

def main():
    check_dir()

    parser = argparse.ArgumentParser()
    parser.add_argument("--clean", action="store_true")
    args = parser.parse_args()

    if args.clean:
        os.system("rm -rf " + PACKAGES_DIR)

    if not path.exists(PACKAGES_DIR):
        os.system("mkdir " + PACKAGES_DIR)
    clone_swift()
    clone_wala()
    clone_swan_vscode()

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(1)
